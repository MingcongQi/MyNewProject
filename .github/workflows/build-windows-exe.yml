name: Build Windows Executable

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows-exe:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    - name: Build JAR
      run: ./gradlew.bat build --info
      
    - name: Verify JAR was built
      run: |
        echo "Checking build/libs directory:"
        if (Test-Path "build/libs") {
          Get-ChildItem -Path build/libs
        } else {
          echo "build/libs directory not found!"
          exit 1
        }
      
    - name: Prepare jpackage input
      run: |
        # Create input directory
        New-Item -ItemType Directory -Force -Path "build/jpackage/input"
        
        # Copy the JAR file and rename it
        $jarFile = Get-ChildItem -Path "build/libs" -Filter "*.jar" | Select-Object -First 1
        if ($jarFile) {
          Copy-Item -Path $jarFile.FullName -Destination "build/jpackage/input/lambda-client-v2.jar"
          echo "Copied $($jarFile.Name) to lambda-client-v2.jar"
        } else {
          echo "No JAR file found in build/libs!"
          exit 1
        }
      
    - name: List input files for debugging
      run: |
        echo "Files in jpackage input directory:"
        if (Test-Path "build/jpackage/input") {
          Get-ChildItem -Path build/jpackage/input -Recurse
        } else {
          echo "Directory build/jpackage/input does not exist!"
        }
        echo "Files in build/libs directory:"
        if (Test-Path "build/libs") {
          Get-ChildItem -Path build/libs -Recurse
        } else {
          echo "Directory build/libs does not exist!"
        }
      
    - name: Create Windows executable
      run: |
        jpackage `
          --input build/jpackage/input `
          --dest build/jpackage/output `
          --name LambdaClientV2 `
          --main-jar lambda-client-v2.jar `
          --type exe `
          --win-console `
          --app-version 2.0.0 `
          --description "Pure Java Lambda HTTP Client v2.0 - No Ports" `
          --vendor "Lambda Client Team" `
          --copyright "Copyright 2024"
      
    - name: Create Windows installer (MSI)
      run: |
        jpackage `
          --input build/jpackage/input `
          --dest build/jpackage/output `
          --name LambdaClientV2 `
          --main-jar lambda-client-v2.jar `
          --type msi `
          --win-console `
          --app-version 2.0.0 `
          --description "Pure Java Lambda HTTP Client v2.0 - No Ports" `
          --vendor "Lambda Client Team" `
          --copyright "Copyright 2024"
      
    - name: List generated files
      run: |
        echo "Generated files:"
        Get-ChildItem -Path build/jpackage/output -Recurse
      
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: lambda-client-windows-exe
        path: build/jpackage/output/*.exe
        
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: lambda-client-windows-installer
        path: build/jpackage/output/*.msi
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/jpackage/output/*.exe
          build/jpackage/output/*.msi
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
