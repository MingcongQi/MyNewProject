plugins {
    id 'java'
    id 'application'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

// Set the main class for the application
application {
    mainClass = 'com.example.lambdaclient.SimpleLambdaClient'
}

dependencies {
    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    
    // Logging (simple)
    implementation 'org.slf4j:slf4j-simple:2.0.9'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Task to prepare application for jpackage
task prepareApp(type: Copy) {
    dependsOn jar  // Changed from bootJar to jar
    
    doFirst {
        mkdir 'build/jpackage/input'
    }
    
    from 'build/libs'
    into 'build/jpackage/input'
    include '*.jar'
    
    // Rename the jar to a consistent name for jpackage
    rename { filename ->
        if (filename.endsWith('.jar')) {
            return 'lambda-client-app.jar'
        }
        return filename
    }
}

// Task to create Windows executable using jpackage
task createWindowsExe(type: Exec) {
    dependsOn prepareApp
    
    doFirst {
        mkdir 'build/jpackage/output'
    }
    
    commandLine 'jpackage',
        '--input', 'build/jpackage/input',
        '--dest', 'build/jpackage/output',
        '--name', 'LambdaClient',
        '--main-jar', 'lambda-client-app.jar',
        '--type', 'exe',
        '--win-console',
        '--app-version', version,
        '--description', 'Pure Java Lambda HTTP Client',
        '--vendor', 'Lambda Client Team',
        '--copyright', 'Copyright 2024'
}

// Create a fat JAR with all dependencies
jar {
    archiveBaseName = 'lambda-client-app'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(
            'Main-Class': 'com.example.lambdaclient.SimpleLambdaClient',
            'Implementation-Title': 'Lambda HTTP Client',
            'Implementation-Version': project.version
        )
    }
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
