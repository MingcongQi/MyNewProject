plugins {
    id 'java'
    id 'application'
}

group = 'com.example'
version = '3.0.0'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

// Set the main class for the CTI application
application {
    mainClass = 'com.example.cti.CTIEventMonitorApplication'
}

dependencies {
    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.0'
    
    // HTTP Client (Java 11+ built-in, but explicit for clarity)
    // implementation 'java.net.http' // Built into JDK 11+
    
    // XML processing for DMCC API and ECMA-269 CSTA
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.8'
    implementation 'javax.xml.soap:javax.xml.soap-api:1.4.0'
    implementation 'com.sun.xml.messaging.saaj:saaj-impl:1.5.3'
    
    // ECMA-269 CSTA Phase III Standard Support
    // Note: In production, you would include the actual Avaya DMCC SDK JAR
    // implementation files('lib/dmcc-sdk.jar') // Avaya DMCC SDK
    // implementation files('lib/csta-binding.jar') // ECMA CSTA Binding Classes
    
    // XML Schema validation for CSTA compliance
    implementation 'org.apache.xmlbeans:xmlbeans:5.1.1'
    
    // Enhanced logging with structured output
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    
    // SSL/TLS support for secure DMCC connections
    // implementation 'javax.net.ssl' // Built into JDK
    
    // Concurrent utilities for CSTA event processing
    // implementation 'java.util.concurrent' // Built into JDK
    
    // Validation for CSTA message compliance
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // CSTA Testing utilities
    testImplementation 'org.xmlunit:xmlunit-core:2.9.1'
    testImplementation 'org.xmlunit:xmlunit-matchers:2.9.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Task to prepare application for jpackage
task prepareApp(type: Copy) {
    dependsOn jar
    
    doFirst {
        mkdir 'build/jpackage/input'
    }
    
    from 'build/libs'
    into 'build/jpackage/input'
    include '*.jar'
    
    // Rename the jar to a consistent name for jpackage
    rename { filename ->
        if (filename.endsWith('.jar')) {
            return 'cti-event-monitor.jar'
        }
        return filename
    }
}

// Task to create Windows executable using jpackage
task createWindowsExe(type: Exec) {
    dependsOn prepareApp
    
    doFirst {
        mkdir 'build/jpackage/output'
    }
    
    commandLine 'jpackage',
        '--input', 'build/jpackage/input',
        '--dest', 'build/jpackage/output',
        '--name', 'CTIEventMonitor',
        '--main-jar', 'cti-event-monitor.jar',
        '--type', 'exe',
        '--win-console',
        '--app-version', '3.0.0',
        '--description', 'ECMA-269 CSTA Phase III Compliant CTI Event Monitor',
        '--vendor', 'CTI Development Team',
        '--copyright', 'Copyright 2024'
}

// Create a fat JAR with all dependencies
jar {
    archiveBaseName = 'cti-event-monitor'
    archiveVersion = '3.0.0'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(
            'Main-Class': 'com.example.cti.CTIEventMonitorApplication',
            'Implementation-Title': 'CTI Event Monitor - ECMA-269 CSTA Phase III Compliant',
            'Implementation-Version': '3.0.0',
            'Implementation-Vendor': 'CTI Development Team',
            'Specification-Title': 'ECMA-269 CSTA Phase III CTI Event Monitor',
            'Specification-Version': '3.0',
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date().toString(),
            'Application-Name': 'CTI Event Monitor v3.0'
        )
    }
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
